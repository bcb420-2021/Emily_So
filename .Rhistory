head(expression[1:2])
if (!requireNamespace("GEOmetadb", quietly = TRUE))
install.packages("GEOmetadb")
if (!requireNamespace("GEOquery", quietly = TRUE))
install.packages("GEOquery")
if (!requireNamespace("dplyr", quietly = TRUE))
install.packages("dplyr")
if (!requireNamespace("edgeR", quietly = TRUE))
install.packages("edgeR")
if (!requireNamespace("knitr", quietly = TRUE))
install.packages("knitr")
if (!requireNamespace("biomaRt", quietly = TRUE))
install.packages("biomaRt")
library(GEOmetadb)
library(GEOquery)
library(dplyr)
library(edgeR)
library(knitr)
library(biomaRt)
if (!requireNamespace("GEOmetadb", quietly = TRUE))
install.packages("GEOmetadb")
if (!requireNamespace("GEOquery", quietly = TRUE))
install.packages("GEOquery")
if (!requireNamespace("dplyr", quietly = TRUE))
install.packages("dplyr")
if (!requireNamespace("edgeR", quietly = TRUE))
install.packages("edgeR")
if (!requireNamespace("biomaRt", quietly = TRUE))
install.packages("biomaRt")
library(GEOmetadb)
library(GEOquery)
library(dplyr)
library(edgeR)
library(knitr)
library(biomaRt)
if (! exists("GSE46562")) {
gse <- getGEO("GSE46562", GSEMatrix = FALSE)
}
data.frame(head(Meta(gse)))
currentGpl <- names(GPLList(gse))[1]
currentGplInfo <- Meta(getGEO(currentGpl))
if (!requireNamespace("GEOmetadb", quietly = TRUE))
install.packages("GEOmetadb")
if (!requireNamespace("GEOquery", quietly = TRUE))
install.packages("GEOquery")
if (!requireNamespace("dplyr", quietly = TRUE))
install.packages("dplyr")
if (!requireNamespace("edgeR", quietly = TRUE))
install.packages("edgeR")
if (!requireNamespace("biomaRt", quietly = TRUE))
install.packages("biomaRt")
library(GEOmetadb)
library(GEOquery)
library(dplyr)
library(edgeR)
library(knitr)
library(biomaRt)
if (! exists("GSE46562")) {
gse <- getGEO("GSE46562", GSEMatrix = FALSE)
}
data.frame(head(Meta(gse)))
currentGpl <- names(GPLList(gse))[1]
currentGplInfo <- Meta(getGEO(currentGpl))
# get the expression data
sfiles = getGEOSuppFiles('GSE46562')
fnames = rownames(sfiles)
expression = read.delim(fnames[1],header = TRUE,check.names = FALSE)
dim(expression)
colnames(expression)[4] = "iPSC1_dup"
colnames(expression)[6] = "iPSC1"
#expression data is 15417 genes x 20 samples.
#define the groups
makeGroupDataframe <- function(patterns,label) {
subs <- colnames(expression)[grep(colnames(expression),pattern=patterns)]
total <- data.frame(lapply(subs,
function(x){unlist(strsplit(x,"\\.sam"))[c(1,2)]}))
labels = c()
labels <- lapply(total[2,], function(x){append(labels,label)})
total[2,] = labels
return(total)
}
samples <- makeGroupDataframe("iPSC[0-9]","control sample")
columns <- colnames(expression)[grep(colnames(expression),pattern="iPSC[0-9]")]
samples <-data.frame(samples, makeGroupDataframe("^[^2]+[0-9+]C[245]","control sample"))
columns <-append(columns,colnames(expression)[grep(colnames(expression),pattern="^[^2]+[0-9+]C[245]")])
samples <-data.frame(samples,makeGroupDataframe("22q11[0-9]+C*[0-9]*","patient sample"))
columns <-append(columns,colnames(expression)[grep(colnames(expression),pattern="22q11[0-9]+C*[0-9]*")])
samples <-data.frame(samples,makeGroupDataframe("12[0-9]+C[29]","patient sample"))
columns <-append(columns,colnames(expression)[grep(colnames(expression),pattern="12[0-9]+C[29]")])
samples <-data.frame(samples,makeGroupDataframe("^[15][83][07]4?","patient sample"))
columns <-append(columns,colnames(expression)[grep(colnames(expression),pattern="^[15][83][07]4?")])
colnames(samples) <- c(columns)
rownames(samples) <- c("Patient number","group")
samples <-data.frame(t(samples))
head(samples)
#distribution
countDensity <- apply(log2(cpm(expression[,2:20])), 2, density)
xlim <- 0; ylim <- 0
for (i in 1:length(countDensity)) {
xlim <- range(c(xlim,countDensity[[i]]$x));
ylim <- range(c(ylim,countDensity[[i]]$y))
}
cols <- rainbow(length(countDensity))
ltys <- rep(1,length(countDensity))
plot(countDensity[[1]],xlim=xlim,ylim=ylim,type="n",
ylab="Smoothing density of log2-CPM",main = "",cex.lab=0.85)
for (i in 1:length(countDensity)) lines(countDensity[[i]],col=cols[i],lty=ltys[i])
#boxplot
originalData2Plot <- log2(expression[2:20])
boxplot(originalData2Plot,las=2)
#BCV plot
matrix = as.matrix(expression[,2:20])
rownames(matrix) <- expression$ensembl_gene_id
list = DGEList(counts=matrix,group=samples$Patient.number)
list = calcNormFactors(list)
counts <- cpm(list)
plotMDS(list,labels = rownames(samples),
col = c("red","blue")[factor(samples$group)])
#BCV
ModelDesign <- model.matrix(~samples$group)
d <- estimateDisp(list,ModelDesign)
plotBCV(d,col.tagwise = "black",col.common = "red")
ids <- expression$`ENSEML_ID|biotype|symbol`
newer_ensembl <- unlist(lapply(ids, function(x){unlist(strsplit(x,split="|",fixed = TRUE))[c(1)]}))
newest_ensembl <- unlist(lapply(ids, function(x){unlist(strsplit(x,split=".",fixed = TRUE))[c(1)]}))
functions <- unlist(lapply(ids, function(x){unlist(strsplit(x,split="|",fixed = TRUE))[c(2)]}))
proteinInfo <- data.frame(ensembl_gene_id=newest_ensembl,role=functions)
expression$`ENSEML_ID|biotype|symbol` = proteinInfo$ensembl_gene_id
names(expression)[names(expression)=="ENSEML_ID|biotype|symbol"] <- "ensembl_gene_id"
head(expression[1:7])
ensembl <- useMart("ensembl")
ensembl = useDataset("hsapiens_gene_ensembl",mart=ensembl)
